// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: clientTransform.proto

package clientTransform

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileUploadService_HandleFilePreUpload_FullMethodName  = "/clientProto.FileUploadService/HandleFilePreUpload"
	FileUploadService_HandleFilePostUpload_FullMethodName = "/clientProto.FileUploadService/HandleFilePostUpload"
)

// FileUploadServiceClient is the client API for FileUploadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileUploadServiceClient interface {
	HandleFilePreUpload(ctx context.Context, in *FilePreRequest, opts ...grpc.CallOption) (*FilePreResponse, error)
	HandleFilePostUpload(ctx context.Context, in *FilePostRequest, opts ...grpc.CallOption) (*FilePostResponse, error)
}

type fileUploadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileUploadServiceClient(cc grpc.ClientConnInterface) FileUploadServiceClient {
	return &fileUploadServiceClient{cc}
}

func (c *fileUploadServiceClient) HandleFilePreUpload(ctx context.Context, in *FilePreRequest, opts ...grpc.CallOption) (*FilePreResponse, error) {
	out := new(FilePreResponse)
	err := c.cc.Invoke(ctx, FileUploadService_HandleFilePreUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileUploadServiceClient) HandleFilePostUpload(ctx context.Context, in *FilePostRequest, opts ...grpc.CallOption) (*FilePostResponse, error) {
	out := new(FilePostResponse)
	err := c.cc.Invoke(ctx, FileUploadService_HandleFilePostUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileUploadServiceServer is the server API for FileUploadService service.
// All implementations must embed UnimplementedFileUploadServiceServer
// for forward compatibility
type FileUploadServiceServer interface {
	HandleFilePreUpload(context.Context, *FilePreRequest) (*FilePreResponse, error)
	HandleFilePostUpload(context.Context, *FilePostRequest) (*FilePostResponse, error)
	mustEmbedUnimplementedFileUploadServiceServer()
}

// UnimplementedFileUploadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileUploadServiceServer struct {
}

func (UnimplementedFileUploadServiceServer) HandleFilePreUpload(context.Context, *FilePreRequest) (*FilePreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFilePreUpload not implemented")
}
func (UnimplementedFileUploadServiceServer) HandleFilePostUpload(context.Context, *FilePostRequest) (*FilePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFilePostUpload not implemented")
}
func (UnimplementedFileUploadServiceServer) mustEmbedUnimplementedFileUploadServiceServer() {}

// UnsafeFileUploadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileUploadServiceServer will
// result in compilation errors.
type UnsafeFileUploadServiceServer interface {
	mustEmbedUnimplementedFileUploadServiceServer()
}

func RegisterFileUploadServiceServer(s grpc.ServiceRegistrar, srv FileUploadServiceServer) {
	s.RegisterService(&FileUploadService_ServiceDesc, srv)
}

func _FileUploadService_HandleFilePreUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilePreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileUploadServiceServer).HandleFilePreUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileUploadService_HandleFilePreUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileUploadServiceServer).HandleFilePreUpload(ctx, req.(*FilePreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileUploadService_HandleFilePostUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileUploadServiceServer).HandleFilePostUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileUploadService_HandleFilePostUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileUploadServiceServer).HandleFilePostUpload(ctx, req.(*FilePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileUploadService_ServiceDesc is the grpc.ServiceDesc for FileUploadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileUploadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clientProto.FileUploadService",
	HandlerType: (*FileUploadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleFilePreUpload",
			Handler:    _FileUploadService_HandleFilePreUpload_Handler,
		},
		{
			MethodName: "HandleFilePostUpload",
			Handler:    _FileUploadService_HandleFilePostUpload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clientTransform.proto",
}

// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: clientTransform.proto

package clientTransform

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FileUploadService service

func NewFileUploadServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FileUploadService service

type FileUploadService interface {
	HandleFilePreUpload(ctx context.Context, in *FilePreRequest, opts ...client.CallOption) (*FilePreResponse, error)
	HandleFilePostUpload(ctx context.Context, in *FilePostRequest, opts ...client.CallOption) (*FilePostResponse, error)
}

type fileUploadService struct {
	c    client.Client
	name string
}

func NewFileUploadService(name string, c client.Client) FileUploadService {
	return &fileUploadService{
		c:    c,
		name: name,
	}
}

func (c *fileUploadService) HandleFilePreUpload(ctx context.Context, in *FilePreRequest, opts ...client.CallOption) (*FilePreResponse, error) {
	req := c.c.NewRequest(c.name, "FileUploadService.HandleFilePreUpload", in)
	out := new(FilePreResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileUploadService) HandleFilePostUpload(ctx context.Context, in *FilePostRequest, opts ...client.CallOption) (*FilePostResponse, error) {
	req := c.c.NewRequest(c.name, "FileUploadService.HandleFilePostUpload", in)
	out := new(FilePostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FileUploadService service

type FileUploadServiceHandler interface {
	HandleFilePreUpload(context.Context, *FilePreRequest, *FilePreResponse) error
	HandleFilePostUpload(context.Context, *FilePostRequest, *FilePostResponse) error
}

func RegisterFileUploadServiceHandler(s server.Server, hdlr FileUploadServiceHandler, opts ...server.HandlerOption) error {
	type fileUploadService interface {
		HandleFilePreUpload(ctx context.Context, in *FilePreRequest, out *FilePreResponse) error
		HandleFilePostUpload(ctx context.Context, in *FilePostRequest, out *FilePostResponse) error
	}
	type FileUploadService struct {
		fileUploadService
	}
	h := &fileUploadServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FileUploadService{h}, opts...))
}

type fileUploadServiceHandler struct {
	FileUploadServiceHandler
}

func (h *fileUploadServiceHandler) HandleFilePreUpload(ctx context.Context, in *FilePreRequest, out *FilePreResponse) error {
	return h.FileUploadServiceHandler.HandleFilePreUpload(ctx, in, out)
}

func (h *fileUploadServiceHandler) HandleFilePostUpload(ctx context.Context, in *FilePostRequest, out *FilePostResponse) error {
	return h.FileUploadServiceHandler.HandleFilePostUpload(ctx, in, out)
}
